@page "/EditarArtista/{ArtistaId:int}"
@inject ArtistaAPI artistasAPI;
@inject NavigationManager navigationManager;
<MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">

    <MudText Class="mt-8" Typo="Typo.h4">Edição de Artista</MudText>

    <MudForm>

        <MudTextField Class="mt-4" T="string" Placeholder="Nome do Artista"
                      Variant="Variant.Outlined"
                      @bind-Value="nome"
                      Required="true"
                      RequiredError="Campo obrigatório." />

        <MudTextField Class="mt-4" T="string" Placeholder="Biografia do artista"
                      Variant="Variant.Outlined"
                      @bind-Value="biografia"
                      Lines="4"
                      Required="true"
                      RequiredError="Campo obrigatório." />

        <div class="d-flex align-center justify-space-between mt-4">
            <MudButton Variant="Variant.Filled"
                       @onclick="Deletar"
                       Color="Color.Secondary">
                Deletar
            </MudButton>
            <div>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       @onclick="Editar">
                Salvar
            </MudButton>
            
            <MudButton Variant="Variant.Filled" @onclick="Voltar" Color="Color.Primary">Voltar</MudButton>
            </div>
        </div>

    </MudForm>
</MudPaper>

@code {
    private string? nome;
    private string? biografia;
    [Parameter]
    public string? NomeArtista { get; set; }

    [Parameter]
    public int ArtistaId { get; set; }

    public ArtistaResponse? Artista { get; set; }


    protected override async Task OnInitializedAsync() // toda vez que esse cara inicializar ele vai fazer isso
    {
        try
        {
            Artista = await artistasAPI.GetArtistaPorIdAsync(ArtistaId);
            nome = Artista!.Nome;
            biografia = Artista!.Bio;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task Deletar()
    {

        await artistasAPI.DeleteArtistaAsync(Artista!.Id);
        navigationManager.NavigateTo("/Artistas");
    }

    private void Voltar()
    {
        navigationManager.NavigateTo("/Artistas");
    }

    private async Task Editar()
    {
            var requestEdit = new ArtistaRequestEdit(Artista!.Id, nome!, biografia!,Artista!.FotoPerfil);
            await artistasAPI.UpdateArtistaAsync(requestEdit);
            navigationManager.NavigateTo("/Artistas");
    }

}